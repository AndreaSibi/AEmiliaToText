ARCHI_TYPE boa(
		   const integer ma_num := 5,	
		   const rate download_rate := 2441.40625,	
		   const rate upload_rate := 305.17578125,	
		   const rate balancer_rate_a := 20000000,	
		   const rate balancer_rate_b := 10000000,	
		   const rate server_req_rate := 70000000,	
		   const rate server_result_rate := 85995,	
		   const rate data_fetch_rate := 36.585,	
		   const integer buffer_size := 10)	
			

ARCHI_ELEM_TYPES

    ELEM_TYPE MA_Type(void)
	
		BEHAVIOR
 

			MobileApp( void; void) = 
					<generate_best_path_req, inf> . <trasmit_req_best_path, inf> . <receive_best_path, _> . MobileApp()
	
		INPUT_INTERACTIONS	
					
			UNI receive_best_path;
			generate_best_path_req

		OUTPUT_INTERACTIONS
					
			UNI trasmit_req_best_path

    ELEM_TYPE NetDown_Type(const integer buffer_size,const rate download_rate)
	
		BEHAVIOR
 

			TransferData(integer(0..buffer_size) item_num := 0; void) = 
					choice
					{
					<receive, _> . TransferData(item_num + 1),
						cond(item_num > 0) ->		<forward, exp(download_rate)> . TransferData(item_num - 1)		
					}
	
		INPUT_INTERACTIONS	
					
			OR receive

		OUTPUT_INTERACTIONS
					
			UNI forward

    ELEM_TYPE NetUp_Type(const integer buffer_size,const rate upload_rate)
	
		BEHAVIOR
 

			TransferData(integer(0..0) item_num := 0; void) = 
					choice
					{
					<receive, _> . TransferData(item_num + 1),
						cond(item_num > 0) ->		<forward, exp(upload_rate)> . TransferData(item_num - 1)		
					}
	
		INPUT_INTERACTIONS	
					
			OR receive

		OUTPUT_INTERACTIONS
					
			OR forward

    ELEM_TYPE Balancer_Type(const integer buffer_size,const rate balancer_rate_a,const rate balancer_rate_b)
	
		BEHAVIOR
 

			BalancerCalled(integer(0..0) item_num := 0; void) = 
					choice
					{
					<capture_req_best_path, _> . BalancerCalled(item_num + 1),
						cond(item_num > 0) ->		choice
						{
							<deliver_req_best_path_a, exp(balancer_rate_a)> . BalancerCalled(item_num - 1),
							<deliver_req_best_path_b, exp(balancer_rate_b)> . BalancerCalled(item_num - 1)		
						}		
					}
	
		INPUT_INTERACTIONS	
					
			UNI capture_req_best_path

		OUTPUT_INTERACTIONS
					
			UNI deliver_req_best_path_a;
			deliver_req_best_path_b

    ELEM_TYPE Server_Type(const integer buffer_size,const rate server_req_rate,const rate server_result_rate)
	
		BEHAVIOR
 

			Start(integer(0..0) item_num := 0,integer(0..0) item_num2 := 0; void) = 
					choice
					{
					<receive_req_best_path, _> . Start(item_num + 1,item_num2),
					<receive_data, _> . Start(item_num,item_num2 + 1),
						cond(item_num > 0) ->		<req_data, exp(server_req_rate)> . Start(item_num - 1,item_num2),
						cond(item_num2 > 0) ->		<transmit_result_best_path, exp(server_result_rate)> . Start(item_num,item_num2 - 1)		
					}
	
		INPUT_INTERACTIONS	
					
			UNI receive_req_best_path;
			receive_data

		OUTPUT_INTERACTIONS
					
			UNI transmit_result_best_path;
			req_data

    ELEM_TYPE DB_Type(const integer buffer_size,const rate data_fetch_rate)
	
		BEHAVIOR
 

			FetchData(integer(0..0) item_num := 0; void) = 
					<receive_data_req, _> . <transmit_data, exp(data_fetch_rate)> . FetchData(item_num)
	
		INPUT_INTERACTIONS	
					
			OR receive_data_req

		OUTPUT_INTERACTIONS
					
			OR transmit_data

				

ARCHI_TOPOLOGY
				
           ARCHI_ELEM_INSTANCES
					MA : MA_Type();
                    MA : MA_Type();
                    MA : MA_Type();
                    MA : MA_Type();
                    MA : MA_Type();
                    ND : NetDown_Type( 10, 2441.40625);
                    NU : NetUp_Type( 10, 305.17578125);
                    LB : Balancer_Type( 10, 2.0E7, 1.0E7);
                    SA : Server_Type( 10, 7.0E7, 85995.0);
                    SB : Server_Type( 10, 7.0E7, 85995.0);
                    DB : DB_Type( 10, 36.585)

		   ARCHI_INTERACTIONS	
					generate_best_path_req;
					generate_best_path_req;
					generate_best_path_req;
					generate_best_path_req;
					generate_best_path_req

		   ARCHI_ATTACHMENTS
					FROM MA.trasmit_req_best_path TO ND.receive;
					FROM MA.trasmit_req_best_path TO ND.receive;
					FROM MA.trasmit_req_best_path TO ND.receive;
					FROM MA.trasmit_req_best_path TO ND.receive;
					FROM MA.trasmit_req_best_path TO ND.receive;
					FROM ND.forward TO LB.capture_req_best_path;
					FROM LB.deliver_req_best_path_a TO SA.receive_req_best_path;
					FROM LB.deliver_req_best_path_b TO SB.receive_req_best_path;
					FROM SA.req_data TO DB.receive_data_req;
					FROM DB.transmit_data TO SA.receive_data;
					FROM SB.req_data TO DB.receive_data_req;
					FROM DB.transmit_data TO SB.receive_data;
					FROM SA.transmit_result_best_path TO NU.receive;
					FROM SB.transmit_result_best_path TO NU.receive;
					FROM NU.forward TO MA.receive_best_path;
					FROM NU.forward TO MA.receive_best_path;
					FROM NU.forward TO MA.receive_best_path;
					FROM NU.forward TO MA.receive_best_path;
					FROM NU.forward TO MA.receive_best_path
				
END

